import { Button, GridBox } from "std-widgets.slint";
import { SubmitButton } from "./components/submitButton.slint";
import { OutputModal, Output } from "./components/outputmodal.slint";
import { OkButton } from "./components/okbutton.slint";
import { EntryForm } from "./components/entryform.slint";

export component AppWindow inherits Window {
    in-out property <string> company;
    in-out property <string> role;
    in-out property <string> pay;
    in-out property <string> area;
    in-out property <string> sector;
    in-out property <string> level;
    in-out property <string> requirements;
    in-out property <string> date_applied;
    in-out property <string> stage;
    in-out property <string> close_date;
    in-out property <string> notes;
    in-out property <string> output:"";
    in-out property <bool> show: false;
    in property <string> rid: "";
    in property <string> uid: "";
    in property <string> s_company: "";
    in property <string> s_role: "";
    in property <string> s_pay: "";
    in property <string> s_area: "";
    in property <string> s_sector: "";
    in property <string> s_level: "";
    in property <string> s_requirements: "";
    in property <string> s_date_applied: "";
    in property <string> s_stage: "";
    in property <string> s_close_date: "";
    in property <string> s_notes: "";
    in property <string> select_result: ""; // delete this

    callback send-entry({
        company: string,
        role:string,
        pay:string,
        area: string,
        sector: string,
        level: string,
        requirements: string,
        date_applied: string,
        stage: string,
        close_date: string,
        notes: string,
    });
    callback select-call();
    callback update-call({
        field: string,
        new_value: string,
        row_id: int,
    });

    title: "Apprenticeship Tracker";
    min-width: 900px;
    min-height: 450px;
    GridLayout {
        padding: 50px;
        spacing: 15px;
        Row {
            EntryForm {
                company <=> company;
                role <=> role;
                pay <=> pay;
                area <=> area;
                sector <=> sector;
                level <=> level;
                requirements <=> requirements;
                date_applied <=> date_applied;
                stage <=> stage;
                close_date <=> close_date;
                notes <=> notes;
            }
        }

        Row {
            HorizontalLayout {
                alignment: space-around;
                SubmitButton {
                    clicked => {
                        // invokes callback 'send-entry' send_entry in main.rs)
                        if (company != "" && role != "" && pay != "" && area != "" && sector != "" && level != "" && requirements != "" && date_applied != "" && stage != "" && close_date != "" && notes != "") {
                            root.output = "Sending Entry";
                            root.show = true;
                            root.send-entry({
                                company: company,
                                role: role,
                                pay: pay,
                                area: area,
                                sector: sector,
                                level: level,
                                requirements: requirements,
                                date_applied: date_applied,
                                stage: stage,
                                close_date: close_date,
                                notes: notes,
                            });
                            company = "";
                            role = "";
                            pay = "";
                            area = "";
                            sector = "";
                            level = "";
                            requirements = "";
                            date_applied = "";
                            stage = "";
                            close_date = "";
                            notes = "";
                        } else {
                            root.output = "Ensure all fields are entered...";
                            root.show = true
                        }
                    }
                }
            }
        }

        Row {
            HorizontalLayout {
                alignment: space-around;
                Button {
                    text: "Get";
                    width: 200px;
                    padding: 10px;
                    max-height: 20px;
                    clicked => {
                        root.select-call()
                    }
                }

                Button {
                    text: "Update";
                    width: 200px;
                    padding: 10px;
                    max-height: 20px;

                    clicked => {
                        root.update-call({ field: "Notes", new_value: "Hello, World !", row_id: 1 })
                    }
                }
            }
        }

        Row {
            Rectangle {
                width: 800px;
                padding: 10px;
                background: #333;
                Text {
                    width: 100%;
                    wrap: word-wrap;
                    color: white;
                    text: select_result;
                }
            }
        }
    }

    OutputModal {
        visible: root.show;
        GridLayout {
            Row {
                Output {
                    text: root.output;
                }
            }

            Row {
                OkButton {
                    clicked => {
                        root.show = false
                    }
                }
            }
        }
    }
}
