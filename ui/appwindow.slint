import { Button, GridBox, GroupBox } from "std-widgets.slint";
import { SubmitButton } from "./components/submitButton.slint";
import { OutputModal, Output } from "./components/outputmodal.slint";
import { OkButton } from "./components/okbutton.slint";
import { EntryForm } from "./components/entryform.slint";
import { UpdateForm } from "components/updateform.slint";

export component AppWindow inherits Window {
    in-out property <string> company;
    in-out property <string> role;
    in-out property <string> pay;
    in-out property <string> area;
    in-out property <string> sector;
    in-out property <string> level;
    in-out property <string> requirements;
    in-out property <string> date-applied;
    in-out property <string> stage;
    in-out property <string> close-date;
    in-out property <string> notes;
    in-out property <string> output: "";
    in-out property <bool> show: false;
    in-out property <string> field;
    in-out property <string> new-value;
    in-out property <string> row-id;
    in property <string> select-result: "";

    callback send-entry({
        company: string,
        role: string,
        pay: string,
        area: string,
        sector: string,
        level: string,
        requirements: string,
        date-applied: string,
        stage: string,
        close-date: string,
        notes: string,
    });
    callback select-call();
    callback update-call({
        field: string,
        new-value: string,
        row-id: string,
    });

    title: "Apprenticeship Tracker";
    min-width: 800px;
    min-height: 550px;

    VerticalLayout {
        alignment: center;
        spacing: 0px;

        HorizontalLayout {
            alignment: center;

            GridLayout {
                padding: 50px;
                spacing: 15px;

                Row {
                    EntryForm {
                        company <=> company;
                        role <=> role;
                        pay <=> pay;
                        area <=> area;
                        sector <=> sector;
                        level <=> level;
                        requirements <=> requirements;
                        date-applied <=> date-applied;
                        stage <=> stage;
                        close-date <=> close-date;
                        notes <=> notes;
                    }
                }

                Row {
                    HorizontalLayout {
                        alignment: space-around;
                        SubmitButton {
                            clicked => {
                                if (company != "" && role != "" && pay != "" && area != "" && sector != "" && level != "" && requirements != "" && date-applied != "" && stage != "" && close-date != "" && notes != "") {
                                    root.output = "Sending Entry";
                                    root.show = true;
                                    root.send-entry({
                                        company: company,
                                        role: role,
                                        pay: pay,
                                        area: area,
                                        sector: sector,
                                        level: level,
                                        requirements: requirements,
                                        date-applied: date-applied,
                                        stage: stage,
                                        close-date: close-date,
                                        notes: notes,
                                    });
                                    company = "";
                                    role = "";
                                    pay = "";
                                    area = "";
                                    sector = "";
                                    level = "";
                                    requirements = "";
                                    date-applied = "";
                                    stage = "";
                                    close-date = "";
                                    notes = "";
                                } else {
                                    root.output = "Ensure all fields are entered...";
                                    root.show = true;
                                }
                            }
                        }
                    }
                }

                Row {
                    UpdateForm {
                        row-id <=> row-id;
                        field <=> field;
                        new-value <=> new-value;
                    }
                }

                Row {
                    HorizontalLayout {
                        alignment: space-around;
                        Button {
                            text: "Update";
                            width: 200px;
                            padding: 10px;
                            max-height: 20px;

                            clicked => {
                                if (field == "" || new-value == "" || row-id == "") {
                                    root.output = "Ensure all fields are entered...";
                                    root.show = true;
                                } else {
                                    root.update-call({ field: field, new-value: new-value, row-id: row-id });
                                    field = "";
                                    new-value = "";
                                    row-id = "";
                                }
                            }
                        }
                    }
                }

                Row {
                    GroupBox {
                        Rectangle {
                            width: 800px;
                            padding: 10px;
                            background: #333;
                            min-height: 100px;
                            Text {
                                width: 100%;
                                wrap: word-wrap;
                                color: white;
                                text: select-result;
                            }
                        }
                    }
                }

                Row {
                    HorizontalLayout {
                        alignment: space-around;
                        Button {
                            text: "Get";
                            width: 200px;
                            padding: 10px;
                            max-height: 20px;
                            clicked => {
                                root.select-call();
                            }
                        }
                    }
                }
            }
        }
    }

    OutputModal {
        visible: root.show;
        GridLayout {
            Row {
                Output {
                    text: root.output;
                }
            }

            Row {
                OkButton {
                    clicked => {
                        root.show = false;
                    }
                }
            }
        }
    }
}
