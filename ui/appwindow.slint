import { Button, GridBox, GroupBox, ScrollView } from "std-widgets.slint";
import { SubmitButton } from "./components/submitButton.slint";
import { OutputModal, Output } from "./components/outputmodal.slint";
import { OkButton } from "./components/okbutton.slint";
import { EntryForm } from "./components/entryform.slint";
import { UpdateForm } from "components/updateform.slint";
import { Input } from "components/input.slint";
import { Menu } from "components/menu.slint";

export component AppWindow inherits Window {
    in-out property <string> company;
    in-out property <string> role;
    in-out property <string> pay;
    in-out property <string> area;
    in-out property <string> sector;
    in-out property <string> level: "Level";
    in-out property <string> requirements;
    in-out property <string> date-applied;
    in-out property <string> stage: "Stage";
    in-out property <string> close-date;
    in-out property <string> notes;
    in-out property <string> output: "";
    in-out property <bool> show: false;
    in-out property <string> field: "Edit Field";
    in-out property <string> new-value;
    in-out property <string> row-id;
    in-out property <string> delete-id;
    in-out property <string> choice: "Add Listing";
    in property <string> select-result: "";

    callback insert-job-call({
        company: string,
        role: string,
        pay: string,
        area: string,
        sector: string,
        level: string,
        requirements: string,
        date-applied: string,
        stage: string,
        close-date: string,
        notes: string,
    });
    callback select-call();
    callback update-call({
        field: string,
        new-value: string,
        row-id: string,
    });
    callback delete-call({
        row-id: string,
    });

    title: "Apprenticeship Tracker";
    min-width: 800px;
    min-height: 550px;

    VerticalLayout {
        HorizontalLayout {
            alignment: center;
            GridLayout {
                padding: 20px;
                spacing: 10px;
                EntryForm {
                    row: 0;
                    col: 0;
                    visible: root.choice == "Add Listing";

                    min-height: 200px;
                    company <=> company;
                    role <=> role;
                    pay <=> pay;
                    area <=> area;
                    sector <=> sector;
                    level <=> level;
                    requirements <=> requirements;
                    date-applied <=> date-applied;
                    stage <=> stage;
                    close-date <=> close-date;
                    notes <=> notes;
                }

                HorizontalLayout {
                    row: 1;
                    col: 0;
                    visible: root.choice == "Add Listing";
                    alignment: space-around;
                    SubmitButton {
                        clicked => {
                            if (company != "" && role != "" && pay != "" && area != "" && sector != "" && level != "" && level != "Level" && requirements != "" && date-applied != "" && stage != "" && close-date != "" && notes != "") {
                                root.output = "Sending Entry";
                                root.show = true;
                                root.insert-job-call({
                                    company: company,
                                    role: role,
                                    pay: pay,
                                    area: area,
                                    sector: sector,
                                    level: level,
                                    requirements: requirements,
                                    date-applied: date-applied,
                                    stage: stage,
                                    close-date: close-date,
                                    notes: notes,
                                });
                                company = "";
                                role = "";
                                pay = "";
                                area = "";
                                sector = "";
                                level = "Level";
                                requirements = "";
                                date-applied = "";
                                stage = "";
                                close-date = "";
                                notes = "";
                            } else {
                                root.output = "Ensure all fields are entered...";
                                root.show = true;
                            }
                        }
                    }
                }

                GroupBox {
                    row: 0;
                    col: 0;
                    visible: root.choice == "View Listings";

                    Rectangle {
                        padding: 5px;
                        background: #333;
                        min-height: 100px;
                        Text {
                            width: 100%;
                            wrap: word-wrap;
                            color: white;
                            text: select-result;
                        }
                    }
                }

                HorizontalLayout {
                    visible: root.choice == "View Listings";
                    row: 1;
                    col: 0;
                    alignment: space-around;
                    Button {
                        text: "Get";
                        width: 200px;
                        padding: 5px;
                        max-height: 20px;
                        clicked => {
                            root.select-call();
                        }
                    }
                }

                UpdateForm {
                    row: 0;
                    col: 0;
                    row-id <=> row-id;
                    field <=> field;
                    new-value <=> new-value;
                    visible: root.choice == "Update Listings";
                }

                HorizontalLayout {
                    row: 1;
                    col: 0;
                    visible: root.choice == "Update Listings";
                    alignment: space-around;
                    Button {
                        text: "Update";
                        width: 200px;
                        padding: 5px;
                        max-height: 20px;

                        clicked => {
                            if (field == "" || new-value == "" || row-id == "") {
                                root.output = "Ensure all fields are entered...";
                                root.show = true;
                            } else {
                                root.update-call({ field: field, new-value: new-value, row-id: row-id });
                                field = "";
                                new-value = "";
                                row-id = "";
                            }
                        }
                    }
                }

                HorizontalLayout {
                    visible: root.choice == "Delete Listing";
                    row: 0;
                    col: 0;

                    spacing: 5px;

                    // Combobox for fetched IDs, use company / role names ??
                    delete-id := Input {
                        text <=> root.delete-id;
                        placeholder-text: "Enter the row ID you wish to delete";
                    }

                    Button {
                        text: "Delete";
                        width: 200px;
                        padding: 10px;
                        height: delete-id.height;

                        clicked => {
                            if (root.delete-id == "") {
                                root.output = "Ensure all fields are entered...";
                                root.show = true;
                            } else {
                                root.delete-call({ row-id: root.delete-id });
                                root.delete-id = "";
                                root.show = true;
                            }
                        }
                    }
                }
            }
        }

        VerticalLayout {
            spacing: 0px;
            Menu {
                alignment: end;
                padding-top: 0;
                choice <=> choice;
            }
        }
    }

    OutputModal {
        visible: root.show;
        GridLayout {
            Row {
                Output {
                    text: root.output;
                }
            }

            Row {
                OkButton {
                    clicked => {
                        root.show = false;
                    }
                }
            }
        }
    }
}
